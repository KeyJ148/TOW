plugins {
    id 'java-library'
    id 'maven-publish'
}

version = '0.1.0'
group = 'cc.abro'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.sourceCompatibility = '17'
compileJava.targetCompatibility = '17'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://raw.github.com/SpinyOwl/repo/releases' }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.2.2'
    implementation 'org.liquidengine:legui:3.3.5'
    implementation 'io.cucumber:cucumber-picocontainer:2.4.0'
    implementation 'org.reflections:reflections:0.10.2'

    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.slf4j:slf4j-nop:1.7.36'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = 'https://maven.pkg.github.com/KeyJ148/OrchEngine'
            credentials {
                username = System.getenv('GITHUB_ACTOR')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
    publications {
        orchEngine(MavenPublication) {
            from components.java
            artifactId = 'orchengine'

            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
}


//LWJGL-3.3.1, Minimal OpenGL, All x64 OS (include arm)
import org.gradle.internal.os.OperatingSystem
project.ext.lwjglVersion = "3.3.1"

def buildLwjglNatives = System.getenv('BUILD_LWJGL_NATIVES')
if (buildLwjglNatives != null) {
    project.ext.lwjglNatives = buildLwjglNatives
} else {
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            def osArch = System.getProperty("os.arch")
            project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            project.ext.lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
    }
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation 'org.jetbrains:annotations:23.0.0'
}
