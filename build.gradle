plugins {
    id 'java'
    id 'application'
}

version = '4.2.0-SNAPSHOT'

compileJava.options.encoding = "UTF-8"
//applicationDefaultJvmArgs = ["-Xmx128M"]
//applicationDefaultJvmArgs += "-XstartOnFirstThread" //TODO For MacOS
applicationDefaultJvmArgs += ["-Dlog4j.defaultInitOverride=true", "-Dlog4j.configurationFile=log4j2.yml"]

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.sourceCompatibility = '17'
compileJava.targetCompatibility = '17'
compileTestJava.options.encoding = "UTF-8"
compileTestJava.options.compilerArgs += ["-Xlint"]

repositories {
	mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://raw.github.com/SpinyOwl/repo/releases" }
}

dependencies {
    implementation project('OrchEngine')

    implementation 'org.liquidengine:legui:3.3.5'
    implementation 'io.cucumber:cucumber-picocontainer:2.4.0'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}

application {
    mainClassName = 'cc.abro.tow.GameStart'
}

distributions.main.contents {
    into ('maps') { from 'maps' }
}

test {
    useJUnitPlatform()
}


//LWJGL-3.3.1, Minimal OpenGL, All x64 OS (include arm)
import org.gradle.internal.os.OperatingSystem
project.ext.lwjglVersion = "3.3.1"

def buildLwjglNatives = System.getenv('BUILD_LWJGL_NATIVES')
if (buildLwjglNatives != null) {
    project.ext.lwjglNatives = buildLwjglNatives
} else {
    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            def osArch = System.getProperty("os.arch")
            project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            def osArch = System.getProperty("os.arch")
            project.ext.lwjglNatives = osArch.contains("64")
                    ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                    : "natives-windows-x86"
            break
    }
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation 'org.jetbrains:annotations:15.0'
}
